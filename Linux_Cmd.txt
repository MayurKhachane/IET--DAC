Basic Linux Commands
1)pwd
  Shows the current directory (where you are)

2)ls
  Lists all files and folders in the current location

3)mkdir name
  Creates a new directory(folder)
  Ex: mkdir mayuresh

4)rmdir name
  Deletes  directory

5)whoami
  Shows the current username

6)cd folder_name
  Move into a directory
Ex: cd mayuresh -> opens the mayuresh folder/directory

7)date
  Shows current date and time
Ex: Thu Sep 4 11:08:54 PDT 2025

8)date +%D
  Shows the date only -> 09/04/25

9)date +%T
 Shows the time only

10)date +%H:%M
 Shows time in hour:minutes format(11:15)

11)cd ..
  Go back to the previous (parent) directory

12)ls -lt
  Lists files/folders with details sorted by time(latest first)

Ex:

text
drwxr-xr-x 1 ietuser ietuser 512 Sep  4 11:18 demo1
drwxr-xr-x 1 ietuser ietuser 512 Sep  4 11:18 demo
drwxr-xr-x 1 ietuser ietuser 512 Sep  4 11:05 mayuresh
drwxr-xr-x 1 ietuser ietuser 512 Sep  4 11:03 powar

13)ls -ltr
  Lists files/folders with details sorted in reverse order(oldest first)

14)touch filename
  Creates a new empty file
Ex: touch abc.txt

15)nano filename
 Opens file in editor to write/edit
Ex: nano abc.txt

16)cat filename
  Displays the content of a file
Ex: cat abc.txt

17)mv filename destination/
 Moves a file into another folder(also used to rename)
Ex: mv abc.txt mayuresh -> moves abc.txt into mayuresh folder/directory

18)cp filename destination/
 Copies a file to another location
Ex: cp abc.txt /home/ietuser/ -> copies abc.txt into /home/ietuser/

19) File permission values in chmod:
   0 = no permission
   1 = execute
   2 = write
   3 = write + execute
   4 = read
   5 = read + execute
   6 = read + write
   7 = read + write + execute

Permissions are set as: user - group - others

 Ex:
    chmod 267 abc.txt
    -> user: write (-w-), group: read+write (rw-), others: read+write+execute (rwx)

    chmod 356 abc.txt
    -> user: write+execute (-wx), group: read+execute (r-x), others: read+write (-rw-)

    chmod 511 abc.txt
    -> user: read+execute (r-x), group: execute (--x), others: execute (--x)

    chmod 611 abc.txt
    -> user: read+write (rw-), group: execute (--x), others: execute (--x)

    chmod 777 abc.txt
    -> -rwxrwxrwx
    -> gives read, write, and execute permissions to everyone

20) touch variable.sh
    nano variable.sh
    -> opens the nano editor
    -> create the file contents:

       #!/bin/sh
       name=mayuresh
       echo $name

    -> Press Ctrl+X, then Y to save, and Enter to confirm the filename

    cat variable.sh      -> displays the script content
    ./variable.sh        -> may give "Permission denied" if not executable

    chmod 777 variable.sh
    -> gives read, write, and execute permissions

    ./variable.sh
    -> Output: mayuresh

21) Working with variables in shell scripts

Ex 1:

#!/bin/sh
name=mayuresh
unset name
echo $name

Output:
(blank, because the variable was unset)


Ex 2:

#!/bin/sh
name=mayuresh
readonly name
name=khachane

Output:
name: is read only

22) While loop in shell script

#!/bin/bash # This line tells the system to use the Bash shell to run the script

a=0         # Initialize variable 'a' with value 0.

# "lt" is the less than operator
# Iterate the loop until 'a' is less than 10

while [ $a -lt 10 ]     # Start of while loop. It will run as long as 'a' is less than 10
do
   echo $a               # Print the current value of 'a'

   a=`expr $a + 1`       # Increment 'a' by 1 using the 'expr' command
done                     # End of the while loop


23) Implementation of `for` loop with `break` statement in Shell Script

#!/bin/bash

# Start of for loop
for a in 1 2 3 4 5 6 7 8 9 10          # The loop will iterate over numbers 1 through 10.
do
   # If 'a' is equal to 5, break the loop
   if [ $a -eq 5 ]                     # Check if variable 'a' equals 5 (-eq is correct for numbers)
   then
      break                            # Exit the loop completely when a=5
   fi

   # Print the value
   echo "Iteration no $a"              # Print current iteration number until 'a' reaches 5
done                                    # End of the for loop


24) Implementation of `for` loop with `continue` statement in Shell Script

#!/bin/bash  
                      
for a in 1 2 3 4 5 6 7 8 9 10    # 'for' loop iterates through numbers 1 to 10
do
   # If 'a' equals 5, then skip the rest of the loop body

   if [ $a -eq 5 ]                # Check if variable 'a' is equal to 5 (-eq is correct for numbers/ == this also allow ).
   then
      continue                    # Skip the iteration when a=5 (go back to next iteration).
   fi

   echo "Iteration no $a"            # Print the current iteration number, except when a=5.
done                                 # End of the for loop.


25) Implementing `until` Loop in Shell Script

#!/bin/bash
a=0

# -gt is the greater than operator
# Iterate the loop until 'a' is greater than 10

until [ $a -gt 10 ]
do
   echo $a                     # Print the current value of 'a'
   a=`expr $a+1`             # Increment 'a' by 1 using arithmetic expansion
done

# Explanation:
# The 'until' loop runs as long as the condition is false.
# Here, the loop runs until 'a' becomes greater than 10.
# So, it prints values from 0 to 10 inclusive.

26) Creating an Infinite Loop with “while true” in Shell Script

#!/bin/bash

while true
do
   # Command to be executed repeatedly
   echo "Hi, I am infinite loop"
   
   # Sleep for 1 second to avoid flooding the terminal
   sleep 1
done

# Explanation:
# - `while true` creates a loop that runs forever because the condition 'true' never changes.
# - The loop prints the message "Hi, I am infinite loop" once every second.
# - The `sleep 1` command pauses execution for 1 second in each iteration, making output readable.
# - To stop the loop, the user must manually interrupt it (e.g., pressing CTRL+C).

27)




